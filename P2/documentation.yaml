openapi: 3.0.3
info:
  title: Restify
  description: |-
    Documentation with a full list of API endpoints, a short description, their methods, and the payloads. Note that the Simple JWT Token is required for each endpoint unless otherwise stated.
  version: 1.0.0
tags:
  - name: api
    description: SimpleJWT Token Authentication
  - name: accounts
    description: Operations about the Restify User accounts
  - name: comments
    description: Operations about Restify Comments
  - name: notifications
    description: Operations about Restify Notifications
  - name: property
    description: Operations about Restify Properties
  - name: reservations
    description: Operations about Restify Reservations
servers:
  - url: http://127.0.0.1
paths:
  # API Endpoints
  /api/token/:
    post:
      tags:
        - api
      summary: Get an authenticated user's token for authentication
      description: Get an authenticated user's token for authentication
      requestBody:
        description: Get an authenticated user's token for authentication
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
        required: True
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  refresh:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY3ODE0NzU1MSwiaWF0IjoxNjc4MDYxMTUxLCJqdGkiOiI0NjVhYzE0N2Y4YjU0ZmE4Yjc5NWRiZTUwNjhlMzMwMiIsInVzZXJfaWQiOjF9.vsSMyM-hwcyuOCQ7uEjGqSCVZhu32G6RxuSc5FEblW8"
                  active:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc4MTQ3NTUxLCJpYXQiOjE2NzgwNjExNTEsImp0aSI6ImUxZDRmMjY2NmNmYzRlOTQ5YzY4OWE0NGMzYTk3OGFiIiwidXNlcl9pZCI6MX0.hAc3sXuZMC_WikNPIUOb_kDz4iNWE7dehlmimeeDqx8"
        '401':
          description: Unauthorized operation (Can also have "Authentication credentials were not provided.")
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
                  code:
                    type: string
                    example: "token_not_valid"
  /api/token/refresh/:
    post:
      tags:
        - api
      summary: Refresh an user's token for authentication
      description: Refresh an user's token for authentication
      requestBody:
        description: Refresh an user's token for authentication. Can optionally also pass in access token.
        content:
          application/json:
            schema:
              properties:
                refresh:
                  type: string
        required: True
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  active:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc4MTQ3NTUxLCJpYXQiOjE2NzgwNjExNTEsImp0aSI6ImUxZDRmMjY2NmNmYzRlOTQ5YzY4OWE0NGMzYTk3OGFiIiwidXNlcl9pZCI6MX0.hAc3sXuZMC_WikNPIUOb_kDz4iNWE7dehlmimeeDqx8"
        '401':
          description: Unauthorized operation (Can also have "Authentication credentials were not provided.")
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
                  code:
                    type: string
                    example: "token_not_valid"
  
  # Accounts Endpoints
  /accounts/{acc_type}/all/:
    get:
      tags:
        - accounts
      summary: Get all users of type acc_type
      description: Get all users of type acc_type
      parameters:
        - name: acc_type
          in: path
          description: The account type. Must be one of User or Host (casing does not matter).
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: "TestUser"
                        first_name:
                          type: string
                          example: "First"
                        last_name:
                          type: string
                          example: "Last"
                        email:
                          type: string
                          example: "test@gmail.com"
                        phone_number:
                          type: string
                          example: "4169997777"
                        account_type:
                          type: string
                          example: "Host"
                        avatar:
                          type: string
                          example: "/media/avatars/me.png"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "No users found"

  /accounts/create:
    post:
      tags:
        - accounts
      summary: Create a user
      description: Create a user
      requestBody:
        description: Create a user
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: string | Unique
                password:
                  type: string
                  example: string | Must must password2 | Must be > 8 characters
                password2:
                  type: string
                  example: string | Must must password | Must be > 8 characters
                email:
                  type: string
                  format: email
                phone_number:
                  type: string
                  example: string | Must be 10 characters
                account_type:
                  type: string
                  example: string | Must be either User or Host
                first_name:
                  type: string
                last_name:
                  type: string
        required: True
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: "TestUser"
                        email:
                          type: string
                          example: "test@gmail.com"
                        phone_number:
                          type: string
                          example: "4169997777"
                        account_type:
                          type: string
                          example: "Host"
                        first_name:
                          type: string
                          example: "First"
                        last_name:
                          type: string
                          example: "Last"
        '400':
          description: Bad request operation (Error messages differ given validation error)
          content:
            application/json:
              schema:
                properties:
                  password:
                    type: string
                    example: "Password does not match Password2"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  details:
                    type: string
                    example: "Authentication credentials were not provided."
      
  /accounts/login:
    post:
      tags:
        - accounts
      summary: Login user
      description: Does not require authentication.
      requestBody:
        description: Login user
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
        required: True
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          example: "TestUser"
                        password:
                          type: string
                          example: "password123"
                        first_name:
                          type: string
                          example: "First"
                        last_name:
                          type: string
                          example: "Last"
                        email:
                          type: string
                          example: "test@gmail.com"
                        phone_number:
                          type: string
                          example: "4169997777"
                        account_type:
                          type: string
                          example: "Host"
                        avatar:
                          type: string
                          example: "/media/avatars/me.png"
                  token:
                    type: object
                    properties:
                      access:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc4MTQ3NTUxLCJpYXQiOjE2NzgwNjExNTEsImp0aSI6ImUxZDRmMjY2NmNmYzRlOTQ5YzY4OWE0NGMzYTk3OGFiIiwidXNlcl9pZCI6MX0.hAc3sXuZMC_WikNPIUOb_kDz4iNWE7dehlmimeeDqx8"
                      refresh:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY3ODMxODI2OSwiaWF0IjoxNjc4MjMxODY5LCJqdGkiOiI2ODhiOGVjNzk3MTc0ODEzYjdlMTYxOWRlYmVhMzRjMCIsInVzZXJfaWQiOjR9.el9hP5e8yawhA4YhcuqsZ4OtgAEaXD3R1ukKLUiqY1Q"
        '400':
          description: Bad request operation
          content:
            application/json:
              schema:
                properties:
                  password:
                    type: string
                    example: "Invalid username and password combination"

  /accounts/logout:
    post:
      tags:
        - accounts
      summary: Logout user
      description: Logout user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  details:
                    type: string
                    example: "User logged out successfully"
        '400':
          description: Bad request operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "User is already logged out"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Given token not valid for any token type"
                  code:
                    type: string
                    example: "token_not_valid"
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        token_class:
                          type: string
                          example: "AccessToken"
                        token_type:
                          type: string
                          example: "access"
                        message:
                          type: string
                          example: "Token is invalid or expired"

  /accounts/{username}/:
    get:
      tags:
        - accounts
      summary: Get a user by username
      description: Get a user by username
      parameters:
        - name: username
          in: path
          description: The username of the user to be queried for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example:
                      username: TestUser
                      first_name: Test
                      last_name: User
                      email: testuser@gmail.com
                      phone_number: "4169997777"
                      account_type: User
                      avatar: "media/avatar.png/"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Invalid user or user not found"
    delete:
      tags:
        - accounts
      summary: Delete a user by username
      description: Delete a user by username
      parameters:
        - name: username
          in: path
          description: The username of the user to be queried for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  details:
                    type: string
                    example: "User has been successfully deleted"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '403':
          description: Forbidden operation (Attempting to delete someone else's account)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Cannot delete another user"

  /accounts/{username}/update/:
    patch:
      tags:
        - accounts
      summary: Update a user by username
      description: Update a user by username
      parameters:
        - name: username
          in: path
          description: The username of the user to be queried for.
          required: true
          schema:
            type: string
      requestBody:
        description: Note - If password is provided, password2 must also be provided.
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                  example: Optional[str]
                phone_number:
                  type: string
                  example: Optional[str]
                account_type:
                  type: string
                  example: Optional[str]
                avatar:
                  type: object
                  example: Optional[ImageFile]
                password:
                  type: string
                  example: Optional[str]
                password2:
                  type: string
                  example: Optional[str]
        required: True
      responses:
        '200':
          description: Successful operation. Password will never be sent in request body containing updated fields.
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example:
                      email: testuser@gmail.com
                      phone_number: "4169997777"
                      avatar: "media/avatar.png/"
        '400':
          description: Bad request operation. Another potential message is "Avatar should not have multiple files".
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Invalid key in body"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '403':
          description: Forbidden operation (Attempting to update someone else's account).
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Cannot edit another user's profile"
  
  /accounts/avatar/{username}/:
    get:
      tags:
        - accounts
      summary: Get an user's avatar by username
      description: Get an user's avatar by username
      parameters:
        - name: username
          in: path
          description: The username of the user to be queried for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Does not return a JSON. Actually directly returns an image.
          content:
            image/png:
              example: "media/image_url.png"
        '400':
          description: Bad request operation. Another potential message is "Avatar should not have multiple files".
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Invalid key in body"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: Not found operation (Attempting to fetch a non-existent user's avatar). Likewise, if no avatar exists, then can also be "No avatar associated with user".
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Invalid user or user not found"

  # Property Endpoints
  /property/{id}/:
    get:
      tags:
        - property
      summary: Get the property by id
      description: Get the property by id
      parameters:
        - name: id
          in: path
          description: The id of the property to be queried for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example:
                      id: 5
                      title: 'The Lodge'
                      location: Toronto
                      description: Big lodge with big potential.
                      max_number_of_guests: 9
                      price: 25.42
                      amenities: "Pool,Kayaking,Lake"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Unauthorized access"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Property not found"

  /property/{id}/update/:
    patch:
      tags:
        - property
      summary: Update property and its images. Upon uploading images, all current images will be wiped.
      description: Update property and its images. Upon uploading images, all current images will be wiped.
      parameters:
        - name: id
          in: path
          description: The id of the property to be queried for.
          required: true
          schema:
            type: string
      requestBody:
        description: Update property and its images. Upon uploading images, all current images will be wiped.
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: Optional[str]
                location:
                  type: string
                  example: Optional[str]
                description:
                  type: string
                  example: Optional[str]
                max_number_of_guests:
                  type: integer
                  example: Optional[int]
                price:
                  type: number
                  example: Optional[float]
                amenities:
                  type: string
                  example: Optional[Comma-seperated string (no spaces)]
                images:
                  type: object
                  example: Optional[ImageFile] - (0-N)
        required: True
      responses:
        '200':
          description: Successful operation (only sends updated fields)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  data:
                    type: object
                    example:
                      max_number_of_guests: 9
                      price: 25.42
                      amenities: "Pool,Kayaking,Lake"
                      images: ["/media/property/TestProp2-20191028_232439.jpg", "/media/property/TestProp2-Annotation_2019-10-17_183643.png"]
        '400':
          description: Bad request operation (error message varies)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  amenities:
                    type: string
                    example: "Amenities is not formatted as a comma-seperated list"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "User that is not a Host has no properties"
        '403':
          description: Forbidden operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Cannot edit another host's property"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Property with id: 12 does not exist"

  /property/{id}/delete/:
    delete:
      tags:
        - property
      summary: Delete property and its images.
      description: Delete property and its images.
      parameters:
        - name: id
          in: path
          description: The id of the property to be queried for.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation (only sends updated fields)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  details:
                    type: string
                    example: "Property successfully deleted"
        '400':
          description: Bad request operation (error message varies)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  amenities:
                    type: string
                    example: "Amenities is not formatted as a comma-seperated list"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "User that is not a Host has no properties"
        '403':
          description: Forbidden operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Cannot delete another host's property"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Property with id: 12 does not exist"

  /property/create/:
    post:
      tags:
        - property
      summary: Create property with no images
      description: Create property with no images
      requestBody:
        description: Create property with no images
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  example: string
                location:
                  type: string
                  example: string
                description:
                  type: string
                  example: string
                max_number_of_guests:
                  type: integer
                  example: integer
                price:
                  type: number
                  example: float
                amenities:
                  type: string
                  example: Comma-seperated string (no spaces)
      responses:
        '200':
          description: Successful operation (only sends updated fields)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "success"
                  details:
                    type: string
                    example: "Property successfully deleted"
        '400':
          description: Bad request operation (error message varies)
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  amenities:
                    type: string
                    example: "Amenities is not formatted as a comma-seperated list"
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "User that is not a Host has no properties"
        '403':
          description: Forbidden operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Cannot delete another host's property"
        '404':
          description: Not found operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "Property with id: 12 does not exist"

  /property/search/:
    get:
      tags:
        - property
      summary: Get all properties (0 to N objects returned)
      description: Get all properties (0 to N objects returned)
      parameters:
        - name: page
          in: query
          description: The page for the pagination query. Required if page_size is specified.
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          description: The page size for the pagination query. Not required.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                    example: 1
                  next:
                    type: object
                    example: null
                  previous:
                    type: object
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        title:
                          type: string
                          example: 'The Lodge'
                        location:
                          type: string
                          example: Toronto
                        description:
                          type: string
                          example: Big lodge with big potential.
                        max_number_of_guests:
                          type: integer
                          example: 9
                        price:
                          type: number
                          example: 25.42
                        amenities:
                          type: string
                          example: "Pool,Kayaking,Lake"
                        host:
                          type: integer
                          example: 1
        '401':
          description: Unauthorized operation
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
                  code:
                    type: string
                    example: "token_not_valid"
  
  /property/allHostProperty/:
    get:
      tags:
        - property
      summary: Get all properties (0 to N objects returned)
      description: Get all properties (0 to N objects returned)
      parameters:
        - name: page
          in: query
          description: The page for the pagination query. Required if page_size is specified.
          required: false
          schema:
            type: integer
        - name: page_size
          in: query
          description: The page size for the pagination query. Not required.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                    example: 1
                  next:
                    type: object
                    example: null
                  previous:
                    type: object
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 5
                        title:
                          type: string
                          example: 'The Lodge'
                        location:
                          type: string
                          example: Toronto
                        description:
                          type: string
                          example: Big lodge with big potential.
                        max_number_of_guests:
                          type: integer
                          example: 9
                        price:
                          type: number
                          example: 25.42
                        amenities:
                          type: string
                          example: "Pool,Kayaking,Lake"
                        host:
                          type: integer
                          example: 1
        '400':
          description: Bad request operation
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: "error"
                  details:
                    type: string
                    example: "User that is not a Host has no properties"
        '401':
          description: Unauthorized operation (Can also have "Authentication credentials were not provided.")
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
                  code:
                    type: string
                    example: "token_not_valid"

components:
  schemas:
    Comment:
      type: object
      description: Followup comments after a reservation
      properties:
        id:
          type: integer
          format: int64
          example: 10
        message:
          type: string
          example: Thanks for the followup! I had a great time at X.
        sender_type:
          type: string
          enum:
            - Property
            - User
        last_modified:
          type: string
          description: Gets set to current time
          format: timestamp
          example: 2023-03-05 18:21:25
    Feedback:
      type: object
      description: The feedback after a reservation
      properties:
        id:
          type: integer
          format: int64
          example: 10
        user_rating:
          type: number
          description: Between 0 to 5
          example: 4.0
        property_rating:
          type: number
          description: Between 0 to 5
          example: 4.0
        comments:
          type: object
          description: Foreign key (1-N) to the Comments class. A Feedback class can many Comments.
          example: <Comment id=1>
    Notifications:
      type: object
      description: The notification system
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Jack left a comment on his reservation at 'The Lodge'.
        description:
          type: string
          example: Click here to read Jack's comment.
        url:
          type: string
          example: http://127.0.0.1/notification-1.html/
        status:
          type: string
          enum:
            - Cleared
            - Read
            - Unread
        user:
          type: object
          description: Foreign key (Only 1) to the RestifyUser class with a user whose account type is User.
          example: <User id=2>
        host:
          type: object
          description: Foreign key (Only 1) to the RestifyUser class with a user whose account type is Host.
          example: <User id=8>
    Property:
      type: object
      description: The Restify properties
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: The Lodge
        location:
          type: string
          example: Toronto
        description:
          type: string
          example: Generic description of the property.
        max_number_of_guests:
          type: integer
          description: Must be greater than 0.
          example: 7
        price:
          type: number
          description: The nightly price. Must be greater than 0.
          example: 42.76
        amenities:
          type: string
          description: Comma-seperated string with no spaces in between.
          example: Balcony,Lake,Outdoor Shower
        host:
          type: object
          description: Foreign key (Only 1-N) to the RestifyUser class with a user whose account type is Host. A Host can have multiple properties.
          example: <User id=8>
    PropertyImages:
      type: object
      description: The Restify Property images
      properties:
        id:
          type: integer
          format: int64
          example: 10
        property:
          type: object
          description: Foreign key (Only 1-N) to the Property class. A Property can have multiple images.
          example: <Property id=5>
        image:
          type: object
          example: media/test.png
    Reservation:
      type: object
      description: The Restify Property reservations
      properties:
        id:
          type: integer
          format: int64
          example: 10
        start_date:
            type: string
            description: The start date of the reservation. Earliest date is current date.
            format: date
            example: 2023-03-05
        end_date:
            type: string
            description: The end date of the reservation. Earliest date is the day after the start date.
            format: date
            example: 2023-03-08
        status:
          type: string
          enum:
            - Pending
            - Denied
            - Expired
            - Approved
            - Canceled
            - Terminated
            - Completed
        feedback:
          type: object
          description: One-to-One field to the Feedback class. Can initially be empty.
          example: <Feedback id=2>
        user:
          type: object
          description: Foreign key (1-N) to the RestifyUser class with a user whose account type is User. RestifyUser can have multiple reservations.
          example: <RestifyUser id=2>
        property:
          type: object
          description: Foreign key (1-N) to the Property class. Property can have multiple reservations.
          example: <Property id=7>
    RestifyUser:
      type: object
      description: The authenticated User model
      properties:
        id:
          type: integer
          description: Unique ID
          format: int64
          example: 10
        username:
          type: string
          description: Username used as a unique ID
          example: TestUser
        first_name:
          type: string
          example: Test
        last_name:
          type: string
          example: User
        email:
          type: string
          format: email
          example: testuser@gmail.com
        phone_number:
          type: string
          example: 4169997777
        account_type:
          type: string
          enum:
            - Host
            - User
        avatar:
          type: object
          example: media/test.png
        is_active:
          type: boolean
          example: True
        staff:
          type: boolean
          example: True
        admin:
          type: boolean
          example: True
